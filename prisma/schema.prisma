// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(uuid())
  email                     String         @unique
  isEmailVerified           Boolean        @default(false)
  firstName                 String?
  middleName                String?
  lastName                  String?
  phoneNumber               String? // For contact, OTPs
  avatar                    String? // Profile photo URL
  dateOfBirth               DateTime? // Age for medical context
  gender                    String? // "female", "male", "other"
  address                   String?
  languagePreference        String? // For personalized content
  lastLoginAt               DateTime?
  userType                  UserType
  password                  String? // Nullable if they signed up via OAuth only
  authProvider              AuthProvider[] // Relation to linked OAuth logins
  refreshToken              String? @unique // Optional
  status                    UserStatus
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  deletedAt                 DateTime? 
  deletedBy                 String? // id of user who deleted account
  deleteReason              String?  

   // relations  
  doctor                     Doctor?
  patient                    Patient?
  admin                      Admin?
  personalAccessToken        PersonalAccessToken[]
  doctorsConsultations       Consultations[]         @relation("consultationDoctor")
  patientsConsultations      Consultations[]         @relation("consultationPatient")
}

model AuthProvider {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  provider            AuthenticationProviders // "google", "facebook", "apple", "email"
  providerUserId      String // ID from the provider (e.g. Google UID)
  createdAt           DateTime @default(now())

  @@unique([provider, providerUserId]) // Prevent duplicates
  @@unique([userId, provider, providerUserId]) // Prevent duplicates
  @@unique([userId, provider]) // Prevent duplicates
}

model Doctor {
  id                              String             @id @default(uuid()) @map("user_id")
  specialization                  String?
  subSpecialization               String[]
  yearsOfExperience               Int?
  hospitalAffiliation             String?
  consultationFee                 Decimal? // For paid consultations
  bio                             String? // Short profile about the doctor
  availableTimeSlots              Json? // Optional, for booking integration
  facialVerificationImage         String?
  idCardType                      String?
  idNumber                        String?
  idExpiryDate                    DateTime?
  licenseImage                    String? // url of license stored
  licenseNumber                   String?
  issuingAuthority                String?
  institutionAttended             String?
  countryOfRegistration           String?
  stateOfRegistration             String?
  licenseExpiryDate               DateTime?
  experienceMenstrualHealth       Boolean? 
  experienceVirtualConsult        Boolean? 
  licenseVerificationStatus       VerificationStatus?
  facialVerificationStatus        VerificationStatus?
  idVerificationStatus            VerificationStatus?
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @updatedAt
  user                            User               @relation(fields: [id], references: [id], onDelete: Cascade)
}


model Patient {
  id                          String       @id @default(uuid()) @map("user_id")
  emergencyContact            Json?
  height                      Decimal? // kg only 
  weight                      Decimal? // in cm only
  bmi                         Decimal ?         
  bloodType                   String? // e.g., "A+", "O-"
  genotype                    String?
  allergies                   String[] // PostgreSQL supports array
  chronicConditions           String[] // e.g., ["PCOS", "Diabetes"]
  averagePeriodLength         Decimal?
  cyclePattern                Json? // stores time range and the cycle patter  eng {"2025-08-01_2025-12-31": "regular", "2025-12-31_2026-01-01": "irregular",} only adds when changes occur
  
  
  cycleHistory                Cycle[] // Relation (see below)
  user                        User         @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Admin {
  id   String @id @default(uuid()) @map("user_id")
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
}

/**
 * PersonalAccessToken - for all types of code verification e.g email, reset password, or delete account
 */
model PersonalAccessToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      TokenType
  expiry    DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@unique([type, token])
  @@unique([userId, type, token])
}

model Cycle {
  id                          String   @id @default(uuid())
  patientId                   String
  patient                     Patient  @relation(fields: [patientId], references: [id])
  startDate                   DateTime   // cycl start date
  endDate                     DateTime
  lenghtOfCircle              Int
  lengthOfPeriod              Int
  ovulationDate               DateTime
  periodStartDate             DateTime
  periodEndDate               DateTime
  symptoms                    String[] // e.g., ["cramps", "headache"]
  remark                      Remark? 
  notes                       String?
  pattern                     CyclePattern?
  phases                      PhaseLog[]
}

model PhaseLog {
  id                   String     @id @default(uuid())
  cycleId              String
  cycle                Cycle      @relation(fields: [cycleId], references: [id])
  phase                CyclePhase
  startDate            DateTime
  endDate              DateTime
  notes                String?
  hormoneLogs          HormoneLog[]
  
}

model HormoneLog {
  id                    String   @id @default(uuid())
  phaseLog              PhaseLog  @relation(fields: [phaseId], references: [id])
  phaseId               String
  startDate             DateTime
  hormoneType           HormoneType // e.g., "estrogen", "progesterone"
  level                 Float        // scale 1–10 or actual ng/mL
  unit                  String?      // optional (e.g., ng/mL, pg/mL, relative)
  trend                 HormoneTrend? // rising, falling, stable
  mood                  String[]        // mood on this specific day
}

model EducationalMaterial {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String[]
  tags        String[] // e.g., ["cycle", "hormones", "nutrition"]
  uploadedBy  String?
  createdAt   DateTime @default(now())
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  location    String?
  date        DateTime
  imageUrls   String[]
}

model Consultations {
  id                  String   @id @default(uuid())
  doctorId            String?
  patientId           String
  previousDoctors    String[]
  status             ConsultationStatus
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime? 
  deletedBy          String? // id of user who deleted account
  deleteReason       String? 


  doctor            User? @relation("consultationDoctor", fields: [doctorId], references: [id], onDelete: Cascade)
  patient           User @relation("consultationPatient", fields:[patientId], references: [id], onDelete: Cascade)
}



// test recommendation, prescription, calls and socket details

enum CyclePhase {
  menstrual   // Phase (Day 1–5) // little to no hormones
  follicular   // Phase (Day 1–13, overlaps with menstruation at the start) FSH (follicle-stimulating hormone),
  ovulation     // only God truely knows Phase (Day 14 in a 28-day cycle, but timing varies) (luteinizing hormone) 14 days to menstruation day 1
  luteal   // Phase (Day 15–28)
}

enum HormoneType {
  follicle_stimulating_hormone
  luteinizing_hormone
  progesterone
  estrogen
}

enum HormoneTrend {
  peak
  low
  rising
  falling
}

enum CyclePattern {
  regular
  irregular
  unknown
}

enum Remark {
  normal
  longer
  shorter
}

enum UserType {
  admin
  doctor
  patient
}

enum AuthenticationProviders {
  google
  apple
  facebook
}

enum TokenType {
  passwordReset
  deleteAccount
  verifyEmail
  verifyPhone
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum EmailVerificationStatus {
  pending
  verified
}

enum UserStatus {
  active
  restricted
  deleted
}


enum ConsultationStatus{
  waiting
  pending // pending assignment
  accepted // doctor accepted but no startDate
  completed
  canceled
}
